

Check the Go installation:

go version

Step 1: Initialize Your Project


...................................
mkdir beego-project && cd beego-project
go mod init beego-project
.....................................
Step 2: Install Beego

Use the go get command to install Beego:
..............................................
go get github.com/beego/beego/v2
..............................................
Step 3: Install Bee CLI (Optional but Recommended)

Bee CLI helps in creating and running Beego projects:
.................................................................................
go install github.com/beego/bee/v2@latest
.................................................................................
Ensure the bee command is available:
............................................
bee version
...............................................
Step 4: Create a Beego Project

To create a new Beego project using the Bee CLI:
........................................................................
bee new my-beego-app
cd my-beego-app
........................................................
Step 5: Run the Application

Run the Beego application:
.................................................
bee run
........................................................
Open your browser and navigate to http://localhost:8080 to see the Beego default page.
Step 6: Explore Beego

Start modifying the generated project structure to build your application. Refer to the official Beego documentation for advanced features and configurations.

Let me know if you face any issues! ðŸ˜Š
You said:
Set up the Go environment variables:

    GOPATH: Your workspace directory.
    PATH: Add $GOPATH/bin to your PATH.

how to do it
ChatGPT said:
ChatGPT

Setting up the Go environment variables depends on your operating system. Here's how you can do it for different platforms:
For Linux and macOS

    Open a terminal.
    Edit your shell configuration file:
        For bash:
`````````````````
nano ~/.bashrc
`````````````````````````````

For zsh:

    nano ~/.zshrc

Add the following lines to set GOPATH and update PATH:
..............................................................................
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin
..............................................................................
Save the file and reload your shell:
................................................................................
source ~/.bashrc   # or ~/.zshrc
.................................................................................
Verify the setup:
................................
echo $GOPATH
echo $PATH
.........................



go clean -modcache
go mod tidy

<script src="/static/js/spa.js"></script>

"{{.ImageURL}}" alt="Cat Image"


//////////////////////////////

// FavoriteResponse represents the API response when creating a favorite
type FavoriteResponse struct {
    ID     string `json:"id"`
    Status int    `json:"status"`
    Message string `json:"message"`
}

// FavoriteItem represents a single favorite item in the API response
type FavoriteItem struct {
    ID        string   `json:"id"`
    ImageID   string   `json:"image_id"`
    SubID     string   `json:"sub_id"`
    CreatedAt string   `json:"created_at"`
    Image     CatImage `json:"image"`
}

// Love adds an image to the user's favorites.
func (c *CatController) Love() {
    apiKey := loadAPIKey()
    imageID := c.GetString("image_id")
    subID := c.GetString("sub_id")
	c.Ctx.WriteString(subID)

    // Validate required parameters
    if imageID == "" {
        c.Data["json"] = map[string]interface{}{
            "success": false,
            "message": "Image ID is required",
        }
        c.ServeJSON()
        return
    }

    // Create favorite request body
    requestBody := map[string]string{
        "image_id": imageID,
    }
    if subID != "" {
        requestBody["sub_id"] = subID
    }
	
    // Send POST request to create favorite
    responseBody, err := postAPI("https://api.thecatapi.com/v1/favourites", apiKey, requestBody)
    if err != nil {
        c.Data["json"] = map[string]interface{}{
            "success": false,
            "message": "Failed to add favorite: " + err.Error(),
        }
        c.ServeJSON()
        return
    }

    // Parse the response
    var favoriteResponse FavoriteResponse
    if err := json.Unmarshal(responseBody, &favoriteResponse); err != nil {
        c.Data["json"] = map[string]interface{}{
            "success": false,
            "message": "Failed to parse response: " + err.Error(),
        }
        c.ServeJSON()
        return
    }

    c.Data["json"] = map[string]interface{}{
        "success": true,
        "message": "Image added to favorites",
        "id": favoriteResponse.ID,
    }
    c.ServeJSON()
}

// Favs fetches and displays the user's favorite images.
// Favs fetches and displays the user's favorite images.
func (c *CatController) Favs() {
    apiKey := loadAPIKey()
    subID := c.GetString("sub_id")

    apiURL := `https://api.thecatapi.com/v1/favourites?limit=20&sub_id=%s&order=DESC`
    if subID != "" {
        apiURL += "&sub_id=" + subID
    }
	fmt.Printf("IDs are %s\n",subID)

    // Add debug logging
    fmt.Printf("Fetching favorites from URL: %s\n", apiURL)
    
    body, err := fetchAPI(apiURL, apiKey)
    if err != nil {
        fmt.Printf("Error fetching favorites: %v\n", err)
        c.Data["Message"] = "Error fetching favorites: " + err.Error()
        c.TplName = "favs.tpl"
        return
    }

    // Log the raw response
    fmt.Printf("Raw API response: %s\n", string(body))

    var favorites []FavoriteItem
    if err := json.Unmarshal(body, &favorites); err != nil {
        fmt.Printf("Error unmarshaling JSON: %v\n", err)
        c.Data["Message"] = "Error processing favorites: " + err.Error()
        c.TplName = "favs.tpl"
        return
    }

    fmt.Printf("Number of favorites found: %d\n", len(favorites))
    
    if len(favorites) == 0 {
        c.Data["Message"] = "No favorites found"
    } else {
        c.Data["Favorites"] = favorites
        c.Data["Count"] = len(favorites)
        // Debug: Print first favorite
        if len(favorites) > 0 {
            fmt.Printf("First favorite: %+v\n", favorites[0])
        }
    }

    c.TplName = "favs.tpl"
}


func (c *CatController) Voting() {
	
}


func (c *CatController) Vote() {
	
}


9k4


curl -X POST http://localhost:8080/cat/vote      -H "Content-Type: application/json"      -d '{
           "image_id": "MTg3MjE2OQ",
           "sub_id": "user-123",
           "value": 1
         }'
.....................................................
go test ./tests -v


go test ./tests -v -coverprofile=coverage.out
go tool cover -func=coverage.out
go tool cover -html=coverage.out
